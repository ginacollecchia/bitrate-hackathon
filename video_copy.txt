Gina: Welcome to Scrollhole, our submission for the 2020 Bitrate Hackathon, sponsored by Gray Area and Google Magenta. 
X - visual: Bitrate Hackathon Graphic, Scrollhole graphic, "by Gina Collecchia and Erc Heep"

Gina: Who are we? I'm Gina Collecchia--   Eric: And I'm Eric Heep.
Gina: We both come from graduate programs in computer music, myself from CCRMA, and Eric from CalArts. For this project, I took the lead on audio playback, sound design, and the overall concept, while Eric programmed the visual animations and handled timing. Here's how we made it. 
X - visual: X Headshots, with CCRMA and CalArts logos popping up briefly

Gina: Scrollhole is a generative audio-visual web interface, where the interaction of scrolling produces what you see and hear. You can scroll through the hole on a trackpad, mouse wheel, or on mobile. 
X - visual: X Slow scrolling. X Then, user using Scrollhole with a trackpad, and on mobile.

Gina: The speed of scrolling determines many things about the audio playback, which is made up of 3 Tone.js GrainPlayer objects. Scroll speed changes the grain size, overlap, volume, and playback rate of the audio buffer. 
X - visual: X Different speeds of scrolling. X Then, show code: GranularSynthesis.js: update(). 

Gina: Scrolling backwards, out of the tunnel, makes the audio buffer playback in reverse. 
X - visual: X Scrolling in reverse.

Gina: In addition to Tone.js, Scrollhole makes ample use of P5.js. Just like the sounds, aspects of the shapes change with the scroll speed. The colors of the radial background also slowly change as you progress through Scrollhole. 
X - visual: X Tone and then P5 logos. X More scrolling.

Gina: There are 3 regions of Scrollhole, triggered when you have advanced or retreated enough into the tunnel. During the transition from one region to the next, Gain objects are modified on the GrainPlayers to crossfade the audio from stretching sounds, to bubbling sounds, to windy chimey sounds. The visuals shift from circles, to arcs, to hexagons, with the number of sides of the shapes changing gradually during each transition. 
X - visual: X Transitioning in Scrollhole. X Show cuts of all 3 transitions. 

Gina: We also explored using Magenta to accompany our noisy sounds with something more melodic, or a drum beat. We generated some 8-bar drum loops with Magenta Studio in Ableton Live. 
X - visual: X Magenta logo. X Ableton Live with Magenta Studio. X Click on Generate. X Generate new tracks. X Play 2.

Gina: But ultimately, we thought it would be cooler if instead, the machine learning was done in real-time, with Magenta.js. We ran out of time to implement this accompaniment, but plan it for future work. The shapes could represent a score, where clicking on the circles or hexagons or arcs could turn notes on and off, with the sequence repeating visually every 4th shape, or beat, and your position in the tunnel determining the position of the playhead. Then, Magenta.js could accompany the user's input sequence with patterns using its generative RNN models, DrumRNN and GrooVAE.
X - visual: X Static Scrollhole, click mouse on different circles.

Furthermore, we felt the sound design of the granular synthesizers sufficiently captured the chaos of the visual animations.
X - visual/audio: X moments of good sound design

Gina: That's it! We hope you enjoyed our submission. We'd like to thank Myles Borins for help with Node.js, and Alan Watts for help with testing! Now get to scrolling.
X - visual: same as intro